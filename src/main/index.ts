import { app, BrowserWindow, autoUpdater, dialog } from "electron";
import dotenv from "dotenv";
import log from "electron-log/main";
import { WindowManager } from "./windows/windowManager";
import { PortManager } from "./services/portManager";
import { defaultSettings } from "../shared/settings";
import { PreferencesManager } from "./services/preferencesManager";
import { LogServer } from "./services/logServer";
import { registerLogServerHandlers } from "./ipc/logServer";
import { registerPreferencesManagerHandlers } from "./ipc/preferencesManager";
import { registerOnboardHandlers } from "./ipc/onboard";
import { registerWindowHandlers } from "./ipc/window";
dotenv.config();

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

/**
 * Global variable to track if the application is quitting
 */
declare global {
  // eslint-disable-next-line no-var
  var isQuitting: boolean;
}

Object.assign(console, log.functions);

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Initialize the global variable
global.isQuitting = false;

/** Window manager instance */
const windowManager = new WindowManager(
  MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
  MAIN_WINDOW_WEBPACK_ENTRY
);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
  try {
    const port = await PortManager.findAvailablePort();
    const preferencesManager = await PreferencesManager.getInstance();

    windowManager.createWindow(port);

    const logServer = new LogServer(windowManager.getWindow(), port);

    registerLogServerHandlers(logServer, port);
    registerPreferencesManagerHandlers(preferencesManager);
    registerOnboardHandlers();
    registerWindowHandlers(windowManager, preferencesManager);

    // Enable auto-updater in both development and production modes
    if (app.isPackaged) {
      const server = "https://peek-debug.vercel.app";
      const url = `${server}/update/${process.platform}/${app.getVersion()}`;

      autoUpdater.setFeedURL({ url });

      // Check for updates every 12 hours instead of every 6 seconds
      setInterval(() => {
        autoUpdater.checkForUpdates();
        console.info("Checking for updates...");
      }, 2 * 60 * 60 * 1000); // Check every 2 hours 

      autoUpdater.on(
        "update-downloaded",
        (event, releaseNotes, releaseName) => {
          const dialogOpts = {
            type: "info", // Ensure this is one of the allowed string literals
            buttons: ["Restart", "Later"],
            title: "Application Update",
            message: process.platform === "win32" ? releaseNotes : releaseName,
            detail:
              "A new version has been downloaded. Restart the application to apply the updates.",
          };

          dialog.showMessageBox(dialogOpts as any).then((returnValue) => {
            if (returnValue.response === 0) {
              global.isQuitting = true;
              autoUpdater.quitAndInstall();
            }
          });
        }
      );

      autoUpdater.on("error", (message) => {
        console.error("There was a problem updating the application");
        console.error(message);
      });
    }
  } catch (error) {
    console.error("Failed to initialize application:", error);
    app.exit(1);
  }
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    if (windowManager.getWindow === null) {
      const port = await PortManager.findAvailablePort(
        defaultSettings.DEFAULT_PORT
      );
      await windowManager.createWindow(port);
    } else {
      windowManager.show();
    }
  }
});

// Prevent default quit behavior
app.on("before-quit", () => {
  global.isQuitting = true;
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
